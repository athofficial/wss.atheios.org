#!/usr/bin/env node

/**
 * Module dependencies.
 */

'use strict';

// Prepare for logging
const fs = require('fs');
const path = require('path');
const filename = path.join(process.cwd()+'/Logs/', 'created-logfile.log');
var CryptoJS = require("crypto-js");
const bcrypt = require('bcryptjs');

//
// Remove the file, ignoring any errors
//
// try { fs.unlinkSync(filename); }
// catch (ex) { }

var logger = require("../logger");
logger.info("#bin.www: Logging initiated");

// const bcrypt = require('bcryptjs');


global.config = require("../config")();

// Instatiate database
const Database=require('../database');
global.pool=new Database();

//var ath = require('../ath');
// var app = require('../app');
var WebSocket = require('ws');
//var CryptoJS = require("crypto-js");


const {MISC_makeid, MISC_maketoken} = require('../misc');



const wss = new WebSocket.Server({ port: 3010 });
logger.info("#bin.www: Websocket server enabled on port 3010");
wss.on('connection', (ws, req) => {
  // Let us check first if the request comes from a valid game id
  logger.info("On connection: %s",req.url);
  var urlarray = req.url.split('/');
  // urlarray[1] is 'ws'
  // urlarray[2] is gameid
  // urlarray[3) is gameid on secure connection
  if (urlarray[2]==="") {
    urlarray[2]=urlarray[3];
  }
  if (urlarray[1]==="ws") {
    // initial access which we redirect to another server
    logger.info("Initial access.");
    if (config.development) {
      var jstring="{\"@class\":\".AuthenticatedConnectRequest\", \"connectUrl\":\"ws://localhost:3010/fs/"+ urlarray[2] +"\", \"requestId\":\"0\"}";
    }
    else {
      var jstring="{\"@class\":\".AuthenticatedConnectRequest\", \"connectUrl\":\"wss://wss.atheios.org/fs/"+ urlarray[2] +"\", \"requestId\":\"0\"}";
    };
    logger.info("Return msg on connection: %s", jstring);
    ws.send(jstring);
    ws.close();
  } else {
    if (urlarray[1] === "fs") {
      // Redirected access
      logger.info("Redirected access with game id %s, Atheios version %s",urlarray[2],urlarray[3]);

      var sql = "SELECT * FROM gameasset WHERE asset_token=" + pool.escape(urlarray[2]) + " AND asset_ready=2";
      logger.info("SQL: %s", sql);
      pool.query(sql, function (error, rows, fields) {
        if (error) {
          logger.error("%s", error);
          throw(error);
        } else {
          if (rows.length == 1) {
            logger.info("Game exists");
            // Gane exists and is published
            //  const ip = ws.headers['x-forwarded-for'].split(/\s*,\s*/)[0];
            logger.info("Connection established.");
            // okay we received a connect. This connect is taregtedd to the main server. In order to offload we could request to connect to a different server
            // For that reason we will send back the config data for connection. We potentially could offload to different geografical reasons based on IP
            // generate a nonce
            var randstr = MISC_maketoken(5);
            jstring = "{\"@class\":\".AuthenticatedConnectResponse\", \"nonce\":\"" + randstr + "\", \"requestId\":\"0\"}";
            ws.send(jstring);

            ws.on('message', function incoming(message) {
              logger.info('received: %s', message);
              // Here we handle the different incoming items
              if (message === " ") {
                logger.info("Keep alive");
              } else {

                try {
                  var result = JSON.parse(message);
                } catch (e) {
                  logger.error('An error ocurred while parsing the JSON Data: ' + message + '; Error: ' + e);
                  return;
                }

                var resultType = result['@class'];

                switch(resultType) {
                  case '.AuthenticatedConnectRequest':
                    func_AuthenticatedConnectRequest(ws, randstr, rows, result);
                    break;
                  case '.AuthenticationRequest':
                    func_AuthenticationRequest(ws, randstr, rows, result);
                    break;
                  case '.AccountDetailsRequest':
                    func_AccountDetailsRequest(ws, randstr, rows, result);
                    break;
                  case '.SetWageRequest':
                    func_SetWageRequest(ws, req, randstr, rows, result);
                    break;
                  case '.FinishGameRequest':
                    func_FinishGameRequest(ws, randstr, rows, result);
                    break;
                  case '.GameLadderRequest':
                    func_GameLadderRequest(ws, randstr, rows, result);
                    break;
                }

              }
            });
          } else {
            // Game ID cannot be found
            logger.warn("GameID cannot be found:", urlarray[2]);
            jstring = "{\"@class\":\".AuthenticatedConnectResponse\", \"error\": \"Unknown GameID\", \"requestId\":\"0\"}";
            ws.send(jstring);
            ws.close(3004, "ERR: game secrete not correct");
          }
        }
      });
    } else {
      // strange access
      ws.close();
    }
  }

});







/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function func_AuthenticatedConnectRequest(ws, randstr, rows, result) {
  var jstring;

  logger.info("Found AuthenticatedConnectRequest");
  var hmac = result['hmac'];
  var ownhmac = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA256(randstr, rows[0].asset_secret));
  if (hmac === ownhmac) {
    jstring = "{\"@class\":\".AuthenticatedConnectResponse\", \"requestId\":\"0\", \"sessionId\":\"" + randstr + "\"}";
    ws.send(jstring);
  } else {
    // Game ID cannot be found
    logger.warn("GameID + secret cannot be matched: %s <> %s",hmac, ownhmac);
    // TODO Maybe we need to find a solution that the  with a wrong password we are not getting repeated attempts
    ws.close(4000, "ERR: game secrete not correct");
  }
}

function func_AuthenticationRequest(ws, randstr, rows, result) {
  var jstring;

  var username = result['username'];
  var userpass = result['userpass'];
  var apikey = result['apikey'];

  var sql = "SELECT * FROM user WHERE username = " + pool.escape(username);
  logger.info("#bin.www.func_authenticationRequest: %s",sql);
  pool.query(sql, function (error, rows, fields) {
    if (error) {
      logger.error("%s", error);
      throw(error);
    } else {
      if (rows.length == 1) {
        if (userpass!=undefined) {
          logger.info("Hallo %s", userpass);
          bcrypt.compare(userpass, rows[0].password).then(function (res) {
            // res == true
            if (res == true) {

              logger.info("#bin.www.func_authenticationRequest: User exists");
              var randstr = MISC_makeid(24);
              var sql = "SELECT * FROM gameasset WHERE asset_token LIKE " + pool.escape(apikey);
              logger.info("SQL: %s", sql);
              pool.query(sql, function (error, rows1, fields) {
                if (error) {
                  logger.error("#bin.www.func_authenticationRequest: %s", error);
                  throw(error);
                } else {
                  if (rows1.length == 1) {
                    jstring = "{\n" +
                        "  \"@class\" : \".AuthenticationResponse\",\n" +
                        "  \"authToken\" : \"" + randstr + "\",\n" +
                        "  \"displayName\" : \"" + rows[0].displayname + "\",\n" +
                        "  \"newPlayer\" : false,\n" +
                        "  \"userId\" : \"" + rows[0].id + "\",\n" +
                        "  \"gameId\" : \"" + rows1[0].id + "\",\n" +
                        "  \"wage\" : \"" + rows1[0].asset_wage + "\",\n" +
                        "  \"requestId\" : \"" + result['requestId'] + "\"\n" +
                        "}";
                    ws.send(jstring);
                    // Update the entry with the authtoken
                    var vsql = "UPDATE user SET authtoken=" + pool.escape(randstr) + " WHERE id=" + rows[0].id;
                    pool.query(vsql, function (error, rows1, fields) {
                      if (error) {
                        logger.error('#bin.www.func_authenticationRequest: Error: %s', error);
                        throw error;
                      }
                    });
                  } else {
                    jstring = "{\n" +
                        "  \"@class\" : \".AuthenticationResponse\",\n" +
                        "  \"authToken\" : \"" + randstr + "\",\n" +
                        "  \"error\":{\"details\":\"API key not matching.\"}," +
                        "  \"requestId\" : \"" + result['requestId'] + "\"\n" +
                        "}";
                    ws.send(jstring);
                  }
                }
              });

            } else {
              logger.warn("#bin.www.func_authenticationRequest: User / password do not match");
              jstring = "{\n" +
                  "  \"@class\":\".AuthenticationResponse\"," +
                  "  \"error\":{\"details\":\"User password unrecognized\"}," +
                  "  \"newPlayer\":false," +
                  "  \"requestId\" : \"" + result['requestId'] + "\"\n" +
                  "}";
              ws.send(jstring);

              // There is a problem
              // Deny authentication
            }
          });
        } else {
          logger.warn("#bin.www.func_authenticationRequest: User password not found");
          jstring = "{\n" +
              "  \"@class\":\".AuthenticationResponse\"," +
              "  \"error\":{\"details\":\"User password unrecognized\"}," +
              "  \"newPlayer\":false," +
              "  \"requestId\" : \"" + result['requestId'] + "\"\n" +
              "}";
          ws.send(jstring);

          // There is a problem
          // Deny authentication
        }

    } else {
        logger.warn("#bin.www.func_authenticationRequest: User name not found");
        jstring = "{\n" +
            "  \"@class\":\".AuthenticationResponse\"," +
            "  \"error\":{\"details\":\"User name unrecognized\"}," +
            "  \"newPlayer\":false," +
            "  \"requestId\" : \"" + result['requestId'] + "\"\n" +
            "}";
        ws.send(jstring);

        // There is a problem
        // Deny authentication
      }


    }
  });
}

function func_AccountDetailsRequest(ws, randstr, rows, result) {
  var jstring;
  var authtoken=result['authToken'];

  var vsql = "SELECT * FROM user WHERE authtoken=" + pool.escape(authtoken);
  logger.info("#bin.www.func_AccountDetailsRequest: SQL: %s", vsql);
  pool.query(vsql, function (error, rows, fields) {
    if (error) {
      logger.error('#bin.www.func_AccountDetailsRequest: Error: %s', error);
      throw error;
    }
    if (rows.length == 1) {
      logger.info("#bin.www.func_AccountDetailsRequest: Authenticated");
      jstring = "{\n" +
          "  \"@class\" : \".AccountDetailsResponse\",\n" +
          "  \"value\" : " + rows[0].athamount + ",\n" +
          "  \"currency\" : \"ATH\",\n" +
          "  \"requestId\" : \"" + result['requestId'] + "\"\n" +
          "}";
      ws.send(jstring);
    }
  });
}

function func_SetWageRequest(ws, req, randstr, rows, result) {
  var jstring;

  var authtoken=result['authToken'];

  var vsql = "SELECT * FROM user WHERE authtoken=" + pool.escape(authtoken);
  pool.query(vsql, function (error, rows, fields) {
    if (error) {
      logger.error('#bin.www.func_SetWageRequest: Error: %s', error);
      throw error;
    }
    if (rows.length == 1) {
      // OK we identified the connection
      logger.info("#bin.www.func_SetWageRequest: Authenticated");
      var wage = parseInt(result['wage']);
      var amount = rows[0].athamount - wage;
      if (!(amount > 0)) {
        // Wage amount is not correct
        jstring = "{\n" +
            "  \"@class\" : \".SetWageResponse\",\n" +
            "  \"authToken\" : \"" + result['authToken'] + "\",\n" +
            "  \"error\":{\"details\":\"Error: Not enough coins available\"}," +
            "  \"requestId\" : \"" + result['requestId'] + "\"\n" +
            "}";
        ws.send(jstring);

      } else {
        // Register wage for this user and this game
        // Set game as started
        var vsql = "SELECT * FROM gameasset WHERE asset_token=" + pool.escape(result['apiKey']);
        logger.info("#bin.www.func_SetWageRequest: SQL: %s", vsql);
        pool.query(vsql, function (error, rows1, fields) {
          if (error) {
            if (debugon)
              logger.error('Error: %s', error);
            throw error;
          }

          if (rows1.length == 1) {
            // Game is available register the wage and gameplay
            vsql = "UPDATE user SET athamount=" + amount + " WHERE id=" + rows[0].id;
            logger.info("#bin.www.func_SetWageRequest: SQL: %s", vsql);
            pool.query(vsql, function (error, rows2, fields) {
              if (error) {
                logger.error('#bin.www.func_SetWageRequest: Error: %s', error);
                throw error;
              }
              var ip;
              if (req.headers['x-forwarded-for']==undefined) {
                ip = req.connection.remoteAddress;
                if (ip==="::1") {
                  ip="127.0.0.1";
                }
              }
              else {
                ip = req.headers['x-forwarded-for'].split(/\s*,\s*/)[0];
              }
              var wsql = "INSERT INTO gameplay (userid, gameasset_id, amount, gameplay_start_date, gameplay_options, authtoken,gameplay_geo) VALUES (" + rows[0].id + "," + rows1[0].id + "," + wage + ",'" + pool.mysqlNow() + "', 1, " + pool.escape(authtoken) + ",'"+ ip +"')";
              logger.info("#bin.www.func_SetWageRequest: SQL: %s", wsql);
              pool.query(wsql, function (error, rows3, fields) {
                if (error) {
                  logger.error('#bin.www.func_SetWageRequest: Error: %s', error);
                  throw error;
                }
                logger.info("#bin.www.func_SetWageRequest: InsertId: %s", rows3.insertId);
                jstring = "{\n" +
                    "  \"@class\" : \".SetWageResponse\",\n" +
                    "  \"authToken\" : \"" + result['authToken'] + "\",\n" +
                    "  \"value\" : " + amount + ",\n" +
                    "  \"playid\" : " + rows3.insertId + ",\n" +
                    "  \"gameid\" : " + rows1[0].id + ",\n" +
                    "  \"currency\" : \"ATH\",\n" +
                    "  \"status\" : \"OK\",\n" +
                    "  \"reason\" : \"\",\n" +
                    "  \"requestId\" : \"" + result['requestId'] + "\"\n" +
                    "}";
                ws.send(jstring);

              });
            });
          } else {
            jstring = "{\n" +
                "  \"@class\" : \".SetWageResponse\",\n" +
                "  \"authToken\" : \"" + result['authToken'] + "\",\n" +
                "  \"error\":{\"details\":\"Game doesn't exist\"}," +
                "  \"requestId\" : \"" + result['requestId'] + "\"\n" +
                "}";
            ws.send(jstring);
            logger.error("#bin.www.func_SetWageRequest: Couldn't find single game: %s", jstring);

          }
        });
      }
    }
  });
}

// Input
// ScoreValue
// gameID
// authToken
function func_FinishGameRequest(ws, randstr, rows, result) {
  var jstring;
  var playid=parseInt(result['playId']);
  var authtoken=result['authToken'];
  var score=parseInt(result['scoreValue']);

  // gameplay option == 2 means that the game is valid but not yet paid out
  // bit 3 will be set if game is gone through resolution
  var vsql = "UPDATE gameplay SET gameplay_score=" + pool.escape(score) + ", gameplay_end_date='" + pool.mysqlNow() + "', gameplay_options=2 WHERE id=" + pool.escape(playid) + " AND authtoken LIKE " + pool.escape(authtoken);
  logger.info("#bin.www.func_FinishGameRequest: SQL: %s", vsql);
  pool.query(vsql, function (error, rows2, fields) {
    if (error) {
      logger.error('#bin.www.func_SetWageRequest: Error: %s', error);
      throw error;
    }

    logger.info("#bin.www.func_SetWageRequest: Found Finish game.");
    jstring = "{\n" +
        "  \"@class\" : \".FinishGameResponse\",\n" +
        "  \"authToken\" : \"" + result['authToken'] + "\",\n" +
        "  \"status\" : \"OK\",\n" +
        "  \"reason\" : \"\",\n" +
        "  \"requestId\" : \"" + result['requestId'] + "\"\n" +
        "}";
    ws.send(jstring);
  });

}

// gameID
// authToken
// userId
function func_GameLadderRequest(ws, randstr, rows, result) {
  var jstring;
  var gameid = parseInt(result['gameId']);
  var userid = parseInt(result['userId']);

  logger.info("Found GameLadder");

  // First we find the latest game
  var sql = "SELECT * FROM gameplay WHERE gameplay_options=2 AND gameasset_id=" + pool.escape(gameid) + " ORDER BY gameplay_end_date DESC LiMIT 1";
  logger.info("SQL: %s", sql);
  pool.query(sql, function (error, rows2, fields) {
    if (error) {
      logger.error('#bin.www.func_GameLadderRequest: Error: %s', error);
      throw error;
    }

    var sql = "SELECT *, DATE_FORMAT(gameplay_end_date,'%Y-%m-%d') AS date FROM gameplay WHERE gameplay_options=2 AND gameasset_id=" + pool.escape(gameid) + " ORDER BY gameplay_score DESC";
    logger.info("#bin.www.func_GameLadderRequest: SQL: %s", sql);
    pool.query(sql, function (error, rows, fields) {
      if (error) {
        logger.error('#bin.www.func_GameLadderRequest: Error: %s', error);
        throw error;
      }
      var vsql = "SELECT * FROM user ORDER BY id";
      logger.info("#bin.www.func_GameLadderRequest: SQL: %s", vsql);
      pool.query(vsql, function (error, rows1, fields) {
        if (error) {
          logger.error('#bin.www.func_GameLadderRequest: Error: %s', error);
          throw error;
        }

        var i, j;
        var inplay = 0;
        var nrofgames = rows.length;
        var ladder = "";
        // Now we search for the latest game
        if (nrofgames > 0) {
          for (j = 0; j < rows.length; j++) {
            inplay += rows[j].amount;
          }
          for (j = 0; j < rows.length; j++) {
            if (rows2[0].id === rows[j].id)
              break;
          }
          var k = rows[j].userid;
          ladder += "{\n" +
              "  \"position\" : \"" + (j + 1) + "\",\n" +
              "  \"score\" : \"" + rows[j].gameplay_score + "\",\n" +
              "  \"displayname\" : \"" + rows1[k - 1].displayname + "\",\n" +
              "  \"amount\" : \"" + rows[j].amount + "\",\n" +
              "  \"date\" : \"" + rows[j].date + "\"\n" +
              "},";

          if (nrofgames < 5) {
            for (i = 0; i < rows.length; i++) {
              k = rows[i].userid;
              ladder += "{\n" +
                  "  \"position\" : \"" + (i + 1) + "\",\n" +
                  "  \"score\" : \"" + rows[i].gameplay_score + "\",\n" +
                  "  \"displayname\" : \"" + rows1[k - 1].displayname + "\",\n" +
                  "  \"amount\" : \"" + rows[i].amount + "\",\n" +
                  "  \"date\" : \"" + rows[i].date + "\"\n" +
                  "},";
            }
          } else {
            for (i = 0; i < 5; i++) {
              k = rows[i].userid;
              ladder += "{\n" +
                  "  \"position\" : \"" + (i + 1) + "\",\n" +
                  "  \"score\" : \"" + rows[i].gameplay_score + "\",\n" +
                  "  \"displayname\" : \"" + rows1[k - 1].displayname + "\",\n" +
                  "  \"amount\" : \"" + rows[i].amount + "\",\n" +
                  "  \"date\" : \"" + rows[i].date + "\"\n" +
                  "},";
            }
            for (j = i; j < rows.length; j++) {
              k = rows[j].userid;
              ladder += "{\n" +
                  "  \"position\" : \"" + (j + 1) + "\",\n" +
                  "  \"score\" : \"" + rows[j].gameplay_score + "\",\n" +
                  "  \"displayname\" : \"" + rows1[k - 1].displayname + "\",\n" +
                  "  \"amount\" : \"" + rows[j].amount + "\",\n" +
                  "  \"date\" : \"" + rows[j].date + "\"\n" +
                  "},";
            }
          }
          ladder = ladder.slice(0, -1);
        } else {
          ladder = "";
        }
        var sql = "SELECT *,TIMESTAMPDIFF(SECOND, asset_resolution, UTC_TIMESTAMP()) AS secs FROM gameasset WHERE asset_ready=2 AND id=" + pool.escape(gameid);
        logger.info("#bin.www.func_GameLadderRequest: SQL: %s", sql);
        pool.query(sql, async (error, rows, fields) => {
          if (error) {
            logger.error("#bin.www.func_GameLadderRequest: %s", error);
            throw(error);
          } else {
            logger.info("#bin.www.func_GameLadderRequest: %s",rows[0]);
            var timeleft=rows[0].asset_periode*3600-rows[0].secs;
            jstring = "{\n" +
                "  \"@class\" : \".GameLadderResponse\",\n" +
                "  \"authToken\" : \"" + result['authToken'] + "\",\n" +
                "  \"requestId\" : \"" + result['requestId'] + "\",\n" +
                "  \"totalGames\" : " + nrofgames + ",\n" +
                "  \"inPlay\" : " + inplay + ",\n" +
                "  \"timeLeft\" : " + timeleft + ",\n" +
                "  \"ladder\" : [\n" + ladder + "]\n" +
                "}";
            ws.send(jstring);
          }
        });
      });
    });
  });
};

